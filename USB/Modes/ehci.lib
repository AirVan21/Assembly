initEHCI macro
	
; =====================================================================================================
; Temporary BAR information
BAR1 = 0C360A000h
BAR2 = 0C3609000h
BAR3 = 0h 
BAR4 = 0h 


; =====================================================================================================

 	; Prints information about HC Capacity I/O Registers 
	;
	; EBX - contains BAR address
	; EDI - contains Video Mem offset (where to print) | Should be the start of the row 
	; FS  - contains Selector For Zero Memory
	; ES  - contains Video Memory Selector
	printEHCICapInfo proc near

		push ebx           		; Save ebx
		push edi           		; 
		;------------------------
		
		; Show HC Base Address
		lea bx, HCGreet  		; Address HC string
		sub bx, offset GreetMsg ; Start of DS
		call printStrPm    		; Print HC string
		mov ebx, BAR1      		; Gets BAR1	
		
		push bx 				; Saves Low Part
		shr ebx, 16             ; Gets Significant Part
		push bx					; Prints Base Address
		call printWordFromStackPM
		call printWordFromStackPM		

		pop edi           		; Recover Print Point
		add edi, ROWLENGTH 		; Next Row
		push edi                ; Save updated edi 

		; Work with CAPLENGTH
		lea bx, CapLenMsg  		; Address for CapLenMsg
		sub bx, offset GreetMsg ; Start of DS
		call printStrPm    		; Print CapLenMsg
		mov ebx, BAR1      		; Gets BAR1	
		call retrieveCAPLENGTH  ; Write CAPLENGTH for BAR1

		pop edi           		; Recover Print Point
		add edi, ROWLENGTH 		; Next Row
		push edi                ; Save updated edi 
		
		; Work with HCIVERSION 
		lea bx, HCVersion  		; Address for HCVersion
		sub bx, offset GreetMsg ; Start of DS
		call printStrPm    		; Print HCVersion
		mov ebx, BAR1      		; Gets BAR1	
		call retrieveHCIVERSION ; Write HCVersion for BAR1
		
		pop edi           		; Recover Print Point
		add edi, ROWLENGTH 		; Next Row
		push edi                ; Save updated edi 
		
		; Work with HCSPARAMS 
		lea bx, N_PORTS  		; Address for N_PORTS
		sub bx, offset GreetMsg ; Start of DS
		call printStrPm    		; Print N_PORTS
		mov ebx, BAR1      		; Gets BAR1	
		call retrieveHCSPARAMS  ; Write N_PORTS for BAR1
		
        ;-----------------------
		; Out
		pop edi                 ; Recover edi
		pop ebx            		; Recover ebx 
		
		db 0C3h                 ; ret

	endp

	; Retieves and prints CAPLENGTH
	;
	; EBX - contains Base Address (BAR)
	retrieveCAPLENGTH proc near

		push ax			   		; Save ax
		
		xor ax, ax              ;

		mov al, fs:[ebx]   		;   
						   		; Prints CAPLENGTH
		push ax            		; CAPLENGTH1
		call printWordFromStackPM
		
		pop ax  
 
		ret
	endp

	; Retieves and prints EHCI Revision number 
	;
	; EBX - contains Base Address (BAR)
	retrieveHCIVERSION proc near
		
		push ax			   	    ; Save ax
		push ebx           		; Save ebx 
		
		add ebx, 2         		; Offset for HCIVersion 
		mov ax, fs:[ebx]   		;   
						   		; Prints CAPLENGTH
		push ax            		; CAPLENGTH1
		call printWordFromStackPM
		
		pop ebx          
		pop ax             		; Recover registers
 		
		ret
	endp

	; Retieves and prints EHCI HCSPARAMS register 
	; (In this case Number of ports for current HC)
	;
	; EBX - contains Base Address (BAR)
	retrieveHCSPARAMS proc near
		
		push ax			   	    ; Save ax
		push ebx           		; Save ebx 
		
		add ebx, 4         		; Offset for HCSPARAMS 
		mov eax, dword ptr fs:[ebx]  ;   
						   		; Prints Num Of Ports 
		and ax, 0Fh             ; Only last 4 bits are needed
		push ax            		; 
		call printWordFromStackPM
		
		pop ebx          
		pop ax             		; Recover registers
 		
		ret
	endp


 	; Prints information about HC Operational I/O Registers 
	;
	; EBX - contains BAR address
	; EDI - contains Video Mem offset (where to print) | Should be the start of the row 
	; FS  - contains Selector For Zero Memory
	; ES  - contains Video Memory Selector
	printEHCIOperInfo proc near

		push ebx           		 ; Save ebx
		;push edi           		 ; 
		;------------------------
		
		;lea bx, CapLenMsg        ; USBCMD string
		;sub bx, offset GreetMsg  ; Offset for DS
		;call printStrPM          ; Prints string
		
		;-----------------------
		; Out
		;pop edi                  ; Recover edi
		pop ebx            		 ; Recover ebx 
		
		db 0C3h                  ; Ret


	endp


	; Retieves and prints Operational register (USBCMD, USBSTS) 
	; 
	; EAX - contains offset for certain Register
	; EBX - contains Base Address (BAR)
	retrieveOperRegister proc near
		
		push eax			   	; Save eax
		push ebx           		; Save ebx 
		push ecx                ;
		push dx                 ;

		xor edx, edx            ; 
		xor ecx, ecx            ;

		mov dx, [ecx]           ;
		add bx, cx         	    ;  
		mov eax, dword ptr fs:[ebx]   	 
						   		;  
		push ax            		; Prints dword 
		shr eax, 16             ; 
		push ax                 ; 
		call printWordFromStackPM
		call printWordFromStackPM
		
		pop dx                  ; Recover registers
		pop ecx                 ; 
		pop ebx                 ;
		pop eax             	;
 		
		ret
	endp


endm
