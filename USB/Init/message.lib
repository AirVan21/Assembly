messageLib macro

; =====================================================================================================

qTDOffset   = 20h 
PeriodicFramInMem = 01000000h 

; =====================================================================================================
; Offsets for USB Structures

; Queue Head fields offset 
; 
QHHorizLinkOffset 		  = 0
QHEndpointInfoOffset	  = 4
QHTransactionInfoOffset	  = 8
QHCurrentqTDOffset		  = 12
QHNextqTDOffset			  = 16
QHAlternqTDOffset		  = 20 

; Standard Device Requests' offsets
;
bmRequestTypeOffset       = 0
bRequestOffset 			  = 1
wValueOffset			  = 2
wIndexOffset			  = 4
wLengthOffset 			  = 6   

; =====================================================================================================

; Non Linear Address of Queue Head In Memory
; 
QHAddressInMem    		dd 0h 

; Linear Address of Queue Head In Memory
; 
LinearQHAddressInMem    dd 0h 

; Non Linear Address of qTD In Memory
;
QTDAddress1      		dd 0h

; Linear Address of qTD In Memory
;
LinearQTDAddress1 		dd 0h  

; Linear Address of Data Buffer In Memory
;
LinearDataBufferAddress	dd 0h

LinearWriteBufferAddress dd 0h

; =====================================================================================================
; Standard Device Requests

; Get 2-byte Device Status 
; 
GetDeviceStatusReq 		db 80h, 0h
						dw 0h, 0h, 2h 

; Get 8-byte Device Descriptor 
;
GetDeviceDescReq8 		db 80h, 6h
             	   		dw 100h, 0, 8h

; Get 18-byte Device Descriptor 
;
GetDeviceDescReq18 		db 80h, 6h
             	   		dw 100h, 0h, 12h 

; Get String Descriptor (English Language)
;
GetStrDescReq64 		db 80h, 6
             			dw 300h, 0409h, 64
 
; Set Device Address Request (First Address is 1)  
;
SetDeviceAddrReq  		db 0,5
             			dw 1,0,0

; Get Configuration Request
;
GetConfigReq 			db 80h, 08h 
             			dw 0h, 0h, 1h 

; =====================================================================================================   
; Tokens for qTDs 

; Token for SETUP Transaction
;
SetupQTDToken			dd 00080280h 

; Token for IN Transaction
;
InQTDToken				dd 80120180h 

; Token for OUT Transaction
;
OutQTDToken				dd 0h  

; =====================================================================================================            			

FrameListBaseAddr dw 0 	;FrameListBase

FrameListBase db 8*1024 dup(0)

; Data  Buffer (Information For Devices)
;
DataBuffer db 4096 DUP(0) 

; Buffer for (Information From Devices)
; 
WriteBuffer db 4096 DUP(0) 

; =====================================================================================================  

	; Allocates Memory for QH Structures
	; Creates Addresses on QH Structures
	; Update AsynchQueue Base Addresses in Register space 
	;
	initAsynchQueue proc near

		call initializeQueueSpace
		call updateAsynchQueue

		db 0C3h                			; ret  

	endp

	; Creates Setup qTD with Payload (described in ESI)
	;
	; ESI - contains Address Of Standat Device Request Data 
	createSetupQTD:

		;===============================
		; Constructing a Queue Head 

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx                        ; Will be used as a mem pointer
		;-------------------------------;

		;===============================
		; Constructing Setup qTD
		
		xor ebx, ebx 
		
		; Next qTD pointer (0x00)
		mov eax, dword ptr[QTDAddress1]   ; Address of first qTD 		
		mov ebx, 01h                      ;
		mov [eax], ebx                    ; Puts pointer in qTD 

		; Alternative qTD (0x04) 
		add eax, 4 						  ; 
		mov edx, 01h 				      ; Set Alternative qTD Invalid 
		mov [eax], edx                    ; Alternative qTD = 0h 

		; qTD token (0x08)                   
		add eax, 4                        ; 
		;mov edx, dword ptr [SetupQTDToken]; 8 byte Payload [30:16] | Setup PID | Active bit 
		mov edx, dword ptr [SetupQTDToken];		
		mov [eax], edx                    ; 

		; qTD Buffer Pointer list
		; 4Kbyte (5000h) aligned (0x0C)
		add eax, 4                         ;
		mov edx, dword ptr [LinearDataBufferAddress]; Payload Pointer 
		mov [eax], edx                     ; 

		; Write Payload (8 byte)
		mov ebx, [esi]                     ; First 4-Byte From Request
		mov fs:[edx], ebx                  ; 
		add edx, 4 
		mov ebx, [esi + wIndexOffset]      ; Second 4-Byte From Request
		mov fs:[edx], ebx 				   ;
		
		xor ebx, ebx 					   ; Zero Extra Buffer Pointers
		; (0x10)
		add eax, 4
		mov [eax], ebx 
		; (0x14)
		add eax, 4
		mov [eax], ebx 
		; (0x18)
		add eax, 4
		mov [eax], ebx 
		; (0x1C)
		add eax, 4
		mov [eax], ebx 
		
		;-------------------------------;
		pop edx
		pop ebx
		pop eax 
		
		db 0C3h                			; ret 

	; Creates IN qTD 
	;
	; InQTDToken - Address of Token for IN Transaction
	createInQTD:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx                        ; Will be used as a mem pointer


		;===============================
		; Constructing IN qTD

		xor ebx, ebx 
		
		; Next qTD pointer (0x00)
		mov eax, dword ptr[QTDAddress1]  ; Address of first qTD 		
		mov ebx, 01h                     ;
		mov [eax], ebx                   ; Puts pointer in qTD 

		; (0x04)
		add eax, 04h 					;
		mov ebx, 01h 					; Invalid Alternative Pointer
		mov [eax], ebx 					; ZERO field 
		
		; (0x08)
		add eax, 04h 					;
		mov ebx, dword ptr [InQTDToken] ; [31] = 1 In Packet; [14:12] = 000b; [9:8] = 01b IN PID; [7:0] = 0x80 Ready Status 
		mov [eax], ebx					; [30:16] = bytes to transfer 
		
		; (0x0C)
		add eax, 04h 					;
		mov ebx, dword ptr [LinearWriteBufferAddress]
		mov [eax], ebx 					; Address of Buffer to Write

		xor ebx, ebx 					; Zero Extra Buffer Pointers
		
		; (0x10)
		add eax, 4
		mov [eax], ebx 
		; (0x14)
		add eax, 4
		mov [eax], ebx 
		; (0x18)
		add eax, 4
		mov [eax], ebx 
		; (0x1C)
		add eax, 4
		mov [eax], ebx 
		
		pop edx
		pop ebx
		pop eax 
		
		db 0C3h                			; ret 

	; Constructing a Queue Head 
	; 
	createQueueHead proc near
		
		push eax                        ; Saves eax
		push ebx                        ; 
		push edx                        ;
		push cx                         ; 
		;-------------------------------;

		xor edx, edx                    ;
		
		; QH Horizontal Link Pointer (0x00)
		mov eax, dword ptr [QHAddressInMem] ; Pointer to the Queue
		mov dx, ds                      ; Data Segment
		shl edx, 4 						; Linear Address
		add eax, edx                    ; 
		mov ebx, eax				    ;
		or ebx, 02h						; 
		mov eax, dword ptr [QHAddressInMem] ;
		mov [eax], ebx        		    ; 2-nd bit shows that this is QH

		; Endpoint characteristics (0x04)
		add eax, 4                      ;
		mov ebx, 5040E000h				;
		mov [eax], ebx    		        ; (0x400 - max packet size [26:16])

		; Transaction information (0x08)
		add eax, 4 
		mov ebx, 40000000h              ; Check! 
		mov [eax], ebx 		            ; One transaction per microframe

		; Current qTD (0x0C)
		add eax, 4                      ; Set as Zero 
		xor ebx, ebx 					; 
		mov [eax], ebx                  ;

		; Next qTD (0x10)
		add eax, 4 
		mov edx, [LinearQTDAddress1]	; 
		mov [eax], edx               	;

		; Alternative qTD Pointer (0x14)
		add eax, 4 
		mov ebx, 01h 					; Mark as Invalid 
		mov [eax], ebx                  ; Input invalid 

		xor ebx, ebx 					; 
		mov cx, 10						; Amount 

	  loopOverQHfields:

	  	add eax, 04h 					; Step size
	  	mov [eax], ebx 					;

	  	loop loopOverQHfields			; Zero field
		
		;-------------------------------;	
		pop cx                          ;
		pop edx 						;
		pop ebx 						; 
		pop eax  					    ; 
		
		db 0C3h                			; ret 

	endp 

	; Sets USBCMD (Run/Stop) zero-bit to ONE  
	; Software shouldn't write USBCMD (Run/Stop) until USBSTS (HCHalted) bit is one    
	; 
	runHCinCMD proc

		push edx						; Save Register
		push ebx 						; 
		push cx							;
		
		mov ebx, HCBaseAddress          ;

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Address

		
		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		or edx, 1h             			; Sets to one Run/Stop bit 
		mov fs:[ebx], edx               ; Set updated value 

		add ebx, USBSTSoffset			; USB STS Address 

	  waitHCHaltedBit:               
		mov eax, fs:[ebx]				; Get USBSTS value 
		test eax, 00001000h             ; Checking 12-th bit 
		jnz waitHCHaltedBit             ; Wait Until HCHalted is Set   

		pop cx 							;
		pop ebx 						; Recover Register 
		pop edx 						; 

		ret 
	
	endp

	; Sets USBCMD (Run/Stop) zero-bit to ZERO  
	; Wait for 16 microframes   
	; 
	; EBX - contains Base Address 
	stopHCinCMD proc

		push edx						; Save Register
		push ebx 						; 

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Base Address 

		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		and edx, 0fffffffeh             ; Clears Run/Stop bit 
		mov fs:[ebx], edx               ; Set updated value 
										; Recover Register 
		pop ebx 						;
		pop edx 						; 

		ret 
	
	endp 

	; Sets USBCMD (Asynch Queue) bit to ONE 
	; Wait Until Asyhch Queue is valid (transaction end)
	; 
	;
	performAQTransaction proc

		push edx						; Save Register
		push ebx 						; 

		mov ebx, HCBaseAddress 		    ; Gets Base Address

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Base Address 

		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		or edx, 20h   			        ; Sets Asynch Queue bit 
		mov fs:[ebx], edx               ; Set updated value

		add ebx, USBSTSoffset			; Points to USBSTS Register 

	  waitWhileAQisActive:				; Wait till transaction end 

	  	mov edx, fs:[ebx] 				; USBSTS 
	  	test edx, 00002000h				; Checking Reclamation bit 
	  	jz waitWhileAQisActive			;

	  	sub ebx, USBSTSoffset			;
	  	mov edx, fs:[ebx]               ; Gets USBCMD Register 
		and edx, 0ffffffdfh             ; Clears Asynch Queue bit && Reclamation bit 
		mov fs:[ebx], edx               ; Set updated value 

										; Recover Register 
		pop ebx 						;
		pop edx 						; 

		ret 
	
	endp 	

	; Sets in AsуnchLBRegister Address of Already Created Queue Structure
	; 
	; QHAddressInMem - Address of Already Created Queue 
	updateAsynchQueue:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx						;    

		xor edx, edx 					;

		mov ebx, HCBaseAddress			; Gets Base Address Offset

		mov dx, OperRegOff				; Offset for Operational Register
		add dx, AsуnchLBoffset			;
		add ebx, edx					; Points in AsуnchLBReg 

		
		xor eax, eax 

		mov edx, dword ptr [QHAddressInMem]    
		mov ax, ds                      ; Data Segment
		shl eax, 4                      ; 

		add eax, edx 
		
		mov fs:[ebx], eax 				; Point on own Queue 

		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 


	; Prints Transaction Dump 	
	;	
	;
	printTDArrayDump:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx   
		push ecx 
		push esi

   		mov cx, 16h                     ;  
   		mov edx, 00015000h				; 
      
      loopOverTDArray:
      	mov esi, fs:[edx] 				;
      	
      	mov ebx, edx

      	push bx                         ;
      	shr ebx, 16                     ;
      	push bx                         ;

      	call printWordFromStackRM
		call printWordFromStackRM 
		
		call printSpaceRM

		push si                         ;
      	shr esi, 16                     ;
      	push si                         ;

        call printWordFromStackRM
		call printWordFromStackRM 

		call printNewLineRM

		add edx, 04h

		loop loopOverTDArray            ; Loop

		pop esi 
		pop ecx
		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 

	; Prints Transaction Dump 	
	;	
	;
	printInBufferDump:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx   
		push ecx 
		push esi

   		call printNewLineRM

   		mov cx, 04h                     ; 

   		mov edx, 00016000h				;	
      
      loopOverInBufferArray:
      	mov esi, fs:[edx] 				;
      	
      	mov ebx, edx

      	push bx                         ;
      	shr ebx, 16                     ;
      	push bx                         ;

      	call printWordFromStackRM
		call printWordFromStackRM 
		
		call printSpaceRM

		push si                         ;
      	shr esi, 16                     ;
      	push si                         ;

        call printWordFromStackRM
		call printWordFromStackRM 

		call printNewLineRM

		add edx, 04h

		loop loopOverInBufferArray      ; Loop


		pop esi 
		pop ecx
		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 

	; Prints Transaction Dump 	
	;	
	;
	printOutBufferDump:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx   
		push ecx 
		push esi

   		call printNewLineRM

   		mov cx, 04h                     ; 

   		mov edx, 00017000h				; 		
      
      loopOverOutBufferArray:
      	
      	mov esi, fs:[edx] 				;
      	
      	mov ebx, edx

      	push bx                         ;
      	shr ebx, 16                     ;
      	push bx                         ;

      	call printWordFromStackRM
		call printWordFromStackRM 
		
		call printSpaceRM

		push si                         ;
      	shr esi, 16                     ;
      	push si                         ;

        call printWordFromStackRM
		call printWordFromStackRM 

		call printNewLineRM

		add edx, 04h

		loop loopOverOutBufferArray      ; Loop


		pop esi 
		pop ecx
		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 



	; Init Space for Queue Structures  
	; 
	InitializeQueueSpace:
		
        pushad

		;-----------------------;
        ; Вычислить линейный адрес сегмента дескрипторов
        xor     eax, eax 
        mov     ax, ds
        shl     eax, 4
        mov     edx, eax    ;запомнить адрес сегмента
        xor     eax, eax
        xor     ebx, ebx 
        mov     bx, offset FrameListBase ; Адрес
	    add	    ebx, edx
	    and	    ebx, 0FFFFF000h
	    add	    ebx, 1000h		; выровняли на границу 4 килобайт
	    sub	    ebx, edx
        mov     FrameListBaseAddr, bx	; адрес не линейный (выровненный на гранцу 4К)
        
        ; Вычислить линейный адрес буфера данных
        xor     eax, eax 
        xor     ebx, ebx
        lea     bx, DataBuffer
        ; В edx адрес сегмента
        add     ebx, edx
        and	    ebx, 0FFFFF000h
	    add	    ebx, 1000h		; выровняли на границу 4 килобайт
        mov     [LinearDataBufferAddress], ebx	; адрес линейный

        xor     eax, eax 
        xor     ebx, ebx

        lea     bx, WriteBuffer
        ; В edx адрес сегмента
        add     ebx, edx
        and	    ebx, 0FFFFF000h
	    add	    ebx, 1000h		; выровняли на границу 4 килобайт
        mov     [LinearWriteBufferAddress], ebx	; адрес линейный
        
        ; Вычислить линейный адрес заголовка списка выровняв его по границе 16 байт
	    ; теперь дескриптор будет выровнен по этой границе, но его нужно заново заполнить
	    xor	ebx, ebx
	    mov bx, FrameListBaseAddr
	    add	ebx, 4096
        mov [QHAddressInMem], ebx		; адрес не линейный Начала Очереди
	   
       									
	    mov	eax, ebx 				    ; Calculate Pointer in qTD Array 
	    add	eax, 40h
	    and	eax, 0FFFFFFF0h
	    mov [QTDAddress1], eax  	    ; запись нелинейного адреса
       
	    xor edx, edx                    ; Linear Address
	    mov dx, ds                      ;
	    shl edx, 4                      ; 
	    add edx, eax                    ;
	    mov [LinearQTDAddress1], edx    ;

       popad
        
	   db 0C3h                	; ret 

endm