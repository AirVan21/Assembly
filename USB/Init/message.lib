messageLib macro

; =====================================================================================================
; Temporary BAR information

BAR1 = 0C360A000h
BAR2 = 0C3609000h


qTDOffset   = 40h 
qBuffOffset = 00008000h

QHInMem    =  00A00000h
qTDfirst   =  00A00100h
qTDBuffer  =  00900000h

	; Extra function Processing start 
	; 
	;
	introInMessaging:
		
		push eax
		push ebx
		push edx 
		
		jmp CODE_SELECTOR:createMessageSequence

	outInit:

		mov edi, 160

		
		lea bx, USBSTSmsg       ; Address for Message
		sub bx, offset GreetMsg ; Start of DS
		call CODE_SELECTOR:printStrPm    	; Print 

		mov ebx, BAR1           ; 
		mov eax, USBSTSoffset   ; USBCMD 
		
		call retrieveOperRegister

		

	dead_loop:

		jmp dead_loop



	; Setup Queue Head Handle a Control Traffiic
	;
	; DS - data segment   pointer
	; ES - screen segment pointer
	; DI - offset for printing string in Video Mem
	createMessageSequence:

		;===============================
		; Constructing a Queue Head 

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx                        ; Will be used as a mem pointer

		; QH Horizontal Link Pointer
		mov eax, QHInMem                ; Pointer to the next Queue, which should be processed
		mov fs:[eax], 00A00002h         ; 2-nd bit shows that this is QH

		; Endpoint characteristics 
		add eax, 4                      ;
		mov fs:[eax], 0040D000h         ; 40 - max packet size; Low Speed Device Indication

		; Transaction information
		add eax, 4 
		mov fs:[eax], 40000000h         ; One transaction per microframe

		; Current qTD
		add eax, 4                      ; Set as Zerp
		xor ebx, ebx 
		mov fs:[eax], ebx               ;

		; Next qTD
		add eax, 4 
		mov ebx, qTDfirst               ; Pointer to first qTD to process                        
		mov fs:[eax], ebx               ;

		;===============================
		; Constructing qTD
		
		; Next qTD pointer 
		mov eax, qTDfirst               ; Address of first qTD 
		mov edx, eax                    ; 
		add edx, qTDOffset              ; Points to the next qTD 
		mov fs:[eax], edx               ; Puts pointer in qTD 

		; Alternative qTD  
		mov edx, eax                    ;
		add edx, 4                      ; Next field
		xor eax, eax                    ;
		mov fs:[edx], eax               ; Alternative qTD = 0h 

		; qTD token                    
		add edx, 4                      ; 
		mov eax, 00080E80h              ; Setting Setup PID | 8 byte Payload
		mov fs:[edx], eax               ; 

		; qTD Buffer Pointer list
		; 4Kbyte aligned 
		add edx, 4                      ;
		mov eax, qTDBuffer              ; Payload Pointer 
		mov fs:[edx], eax               ; 

		; Write Payload (8 byte)
		mov eax, qTDBuffer              ;
		mov ebx, 80060001h              ; GET_DESCRIPTOR (Device)
		mov fs:[eax], ebx               ;
		add eax, 4                      ;
		mov ebx, 00004000h              ; Length of Descriptor 
		mov fs:[eax], ebx               ;

		;===============================
		; 
		
		pop edx
		pop ebx
		pop eax 
		
		jmp CODE_SELECTOR:initListBase          

	; Init Periodic List Base
	;	
	initListBase:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx   

		mov edx, BAR1                   ;
		add edx, 20h                   	;
		mov fs:[edx], 00080010h         ; Default USB CMD value (with AsyncSchedule)

		add edx, PeriodLBoffset         ; 
		mov eax, QHInMem                ;
		mov fs:[edx], eax               ; Set ListBase Register to QH 

		mov edx, BAR1            		;
		add edx, 20h                   	;
		mov fs:[edx], 00080011h         ; Default USB CMD value (with AsyncSchedule)

		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		jmp CODE_SELECTOR:outInit



endm