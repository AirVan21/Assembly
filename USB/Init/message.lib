messageLib macro

; =====================================================================================================
; Temporary BAR information


qTDOffset   = 100h 
qBuffOffset = 00008000h

PeriodicFramInMem = 01000000h 

QHInMem    =  00A00000h
qTDfirst   =  00A01000h
qTDBufferR =  00900000h
qTDBufferW =  00800000h

	; Extra function Processing start 
	; 
	; EBX - contains Base Address 
	introInMessaging:
		
		push eax				; Save Registers 
		push ebx
		push edx 
		push edi 
		push ecx 

		mov edi, ebx            ; Save Base Address
		xor edx, edx            ; 
	

		call printUploadBuffer
		
		call constructQueueHead

		call createMessageSequence

		mov ebx, edi 			; 

		call updateAsynchQueue	; 

		mov ebx, edi 			; 

		call runAQueueinCMD

		mov cx, 5000h

	  waintDeviceResp:
	  	loop waintDeviceResp 	

		call printNewLineRM

		call printUploadBuffer

		call printNewLineRM

		
		pop ecx 
		pop edi
		pop edx 
		pop ebx
		pop eax 

		db 0C3h                			; ret  


	; Setup Control Traffiic
	;
	createMessageSequence:

		;===============================
		; Constructing a Queue Head 

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx                        ; Will be used as a mem pointer


		;===============================
		; Constructing Setup qTD
		
		; Next qTD pointer (0x00)
		mov eax, qTDfirst               ; Address of first qTD 
		mov edx, eax                    ; 
		add edx, qTDOffset              ; Points to the next qTD 
		mov fs:[eax], edx               ; Puts pointer in qTD 

		; Alternative qTD (0x04) 
		add eax, 4                      ; Next field
		mov edx, 01h 				    ; Set Alternative qTD Invalid 
		mov fs:[eax], edx               ; Alternative qTD = 0h 

		; qTD token (0x08)                   
		add eax, 4                      ; 
		mov edx, 00080E80h              ; 8 byte Payload [30:16] | Setup PID | Active bit 
		mov fs:[eax], edx               ; 

		; qTD Buffer Pointer list
		; 4Kbyte (5000h) aligned (0x0C)
		add eax, 4                      ;
		mov edx, qTDBufferR             ; Payload Pointer 
		mov fs:[eax], edx               ; 

		; Write Payload (8 byte)
		mov edx, qTDBufferR             ;
		mov ebx, 80060001h              ; GET_DESCRIPTOR (Device)
		mov fs:[edx], ebx               ;
		add edx, 4                      ;
		mov ebx, 00004000h              ; Length of Descriptor 
		mov fs:[edx], ebx               ;

		xor ebx, ebx 					; Zero Extra Buffer Pointers
		; (0x10)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x14)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x18)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x1C)
		add eax, 4
		mov fs:[eax], ebx 

		;===============================
		; Constructing IN qTD

		mov eax, qTDfirst
		mov edx, qTDOffset
		add eax, edx					; Points to IN qTD

		mov edx, eax 					; Save IN Address in edx 

		; (0x00)
		add edx, qTDOffset				; qTD after IN 
		mov fs:[eax], edx				; Next qTD pointer
		
		; (0x04)
		add eax, 04h 					;
		mov ebx, 01h 					; Invalid Alternative Pointer
		mov fs:[eax], ebx 				; ZERO field 
		
		; (0x08)
		add eax, 04h 					;
		mov ebx, 80400D80h 				; [31] = 1 In Packet; [14:10] = 000b; [9:8] = 01b IN PID; [7:0] = 0x80 Ready Status 
		mov fs:[eax], ebx				; [30:16] = 0x40 bytes to transfer 
		
		; (0x0C)
		add eax, 04h 					;
		mov ebx, qTDBufferW				; Address of Buffer to Write
		mov fs:[eax], ebx 				; 

		xor ebx, ebx 					; Zero Extra Buffer Pointers
		; (0x10)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x14)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x18)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x1C)
		add eax, 4
		mov fs:[eax], ebx 

		;===============================
		; Constructing OUT qTD

		mov eax, qTDfirst				;  
		mov edx, qTDOffset				;
		add eax, edx                    ;
		add eax, edx                    ; Points to OUT qTD
		mov ebx, 0DEAD0001h				; Last Packet 
		mov fs:[eax], ebx 				; Last Packet

		mov ebx, 01h 					; Invalid Alternative Link 
		add eax, 04h 					; 
		mov fs:[eax], ebx 				; 

		add eax, 04h 					; 
		mov ebx, 80008C80h				; [30:16] - Zero Length, [9:8] OUT PID 
		mov fs:[eax], ebx 				; Write OUT packet 

		xor ebx, ebx 					; Empty Buffer Pointer 
		add eax, 04h 					;
		mov fs:[eax], ebx 				;

		xor ebx, ebx 					; Zero Extra Buffer Pointers
		; (0x10)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x14)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x18)
		add eax, 4
		mov fs:[eax], ebx 
		; (0x1C)
		add eax, 4
		mov fs:[eax], ebx  

		pop edx
		pop ebx
		pop eax 
		
		db 0C3h                			; ret 

	
	; Constructing a Queue Head 
	; 
	constructQueueHead proc near
		
		push eax                        ; Saves eax
		push ebx                        ; 
		;-------------------------------;

		; QH Horizontal Link Pointer (0x00)
		mov eax, QHInMem                ; Pointer to the next Queue, which should be processed
		mov ebx, eax				    ;
		or ebx, 3h						; Marks this as "Invalid QH pointer"
		mov fs:[eax], ebx        		; 2-nd bit shows that this is QH

		; Endpoint characteristics (0x04)
		add eax, 4                      ;
		mov ebx, 0400E000h				;
		mov fs:[eax], ebx    		    ; 0x400 - max packet size [26:16]

		; Transaction information (0x08)
		add eax, 4 
		mov ebx, 40000000h
		mov fs:[eax], ebx 		        ; One transaction per microframe

		; Current qTD (0x0C)
		add eax, 4                      ; Set as Zero 
		xor ebx, ebx 					; 
		mov fs:[eax], ebx               ;

		; Next qTD (0x10)
		add eax, 4 
		mov ebx, qTDfirst               ; Pointer to first qTD to process                        
		mov fs:[eax], ebx               ;

		;-------------------------------;
		pop ebx
		pop eax 
		
		db 0C3h                			; ret 

	endp 	

	; Sets USBCMD (Run/Stop) zero-bit to ZERO  
	; Wait for 16 microframes   
	; 
	; EBX - contains Base Address 
	stopHCinCMD proc

		push edx						; Save Register
		push ebx 						; 
		push cx                         ;

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Base Address 

		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		and edx, 0fffffffeh             ; Clears Run/Stop bit 
		mov fs:[ebx], edx               ; Set updated value 

										; Wait till apply 
		mov cx, 040h 					; 64 iterations
	
	wait16Microframes:
		loop wait16Microframes

		pop cx  						; Recover Register 
		pop ebx 						;
		pop edx 						; 

		ret 
	
	endp 


	; Sets USBCMD (Run/Stop) zero-bit to ONE  
	; Software shouldn't write USBCMD (Run/Stop) until USBSTS (HCHalted) bit is one    
	; 
	runHCinCMD proc

		push edx						; Save Register
		push ebx 						; 
		push cx							;
		
		mov ebx, HCBaseAddress          ;

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Address

		
		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		or edx, 1h             			; Sets to one Run/Stop bit 
		mov fs:[ebx], edx               ; Set updated value 

		add ebx, USBSTSoffset			; USB STS Address 

		; Under Question! (USB STS BLOCKING FACTOR)

	  waitHCHaltedBit:               
		mov eax, fs:[ebx]				; Get USBSTS value 
		test eax, 00001000h             ; Checking 12-th bit 
		jnz waitHCHaltedBit             ; Wait Until HCHalted is Set   

		pop cx 							;
		pop ebx 						; Recover Register 
		pop edx 						; 

		ret 
	
	endp

	; Sets USBCMD (Asynch Queue) bit to ZERO  
	; 
	; EBX - contains Base Address 
	stopAQueueinCMD proc

		push edx						; Save Register
		push ebx 						; 

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Base Address 

		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		and edx, 0ffffffefh             ; Clears Asynch Queue bit 
		mov fs:[ebx], edx               ; Set updated value 

										; Recover Register 
		pop ebx 						;
		pop edx 						; 

		ret 
	
	endp

	; Sets USBCMD (Asynch Queue) bit to ONE 
	; 
	; EBX - contains Base Address 
	runAQueueinCMD proc

		push edx						; Save Register
		push ebx 						; 

		mov ebx, HCBaseAddress 		    ; Gets Base Address

		xor edx, edx                    

		mov dx, OperRegOff				; Offset for Operational Register
		add ebx, edx                    ; USBCMD Base Address 

		mov edx, fs:[ebx]               ; Gets USBCMD Register 
		or edx, 10h   			        ; Clears Asynch Queue bit 
		mov fs:[ebx], edx               ; Set updated value 

										; Recover Register 
		pop ebx 						;
		pop edx 						; 

		ret 
	
	endp 	 	 

	; Sets AsуnchLBRegister on Already Created Queue Structure
	; 
	updateAsynchQueue:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx						;    

		xor edx, edx 					;

		mov ebx, HCBaseAddress			; Gets Base Address Offset

		mov dx, OperRegOff				; Offset for Operational Register
		add dx, AsуnchLBoffset			;
		add ebx, edx					; Points in AsуnchLBReg 

		mov eax, QHInMem				; Address of Queue Structure
		mov fs:[ebx], eax 				; Point on own Queue 

		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 


	; Init Periodic List Base
	;	
	; EBX - contains Base Address 
	initAListBase:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx   

		
		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 

	; Prints Data From Simple Buffer
	; 
	printUploadBuffer:

		push eax                        ; Saves eax
		push ebx                        ; 
		push edx   

		mov eax, qTDBufferW				;
		mov ebx, fs:[eax]				; Gets DWORD from Buffer 

		push bx
		shr ebx, 16
		push bx 

		call printWordFromStackRM
		call printWordFromStackRM 

		pop edx 
		pop ebx                         ; Recover 
		pop eax 

		db 0C3h                			; ret 


endm