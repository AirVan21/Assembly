initOperationalInfo macro

 	
; =====================================================================================================
; Operational registers offsets


HCSPARAMoffset = 04h 

USBCMDoffset   = 00h
USBSTSoffset   = 04h
USBINToffset   = 08h
FRINDEXoffset  = 0Ch
CTRLDSoffset   = 10h 
PeriodLBoffset = 14h
AsуnchLBoffset = 18h 
CONFIGoffgset  = 40h
PORTSCOffset   = 44h


; =====================================================================================================
; Operational Registers Table 
; 
; [31:24] - reserved; [23:16] - Interrupt interval; [15:12] - reserved; [11] - Asynch Shedule Park; [10] - reserved
; [9:8] - Asynch Shedule Park Mode; [7] - Light HC reset; [6] - Interrupt on Asynch Doorbell; [5] - Async Schedule; [4] - Periodic Schedule;  
; [3:2] - Frame list size; [1] - HC Reset; [0] - Run/Stop bit 
; Default = 00080000h 
USBCMDReg			dd 0h 
; [0] - Complete USB Transation  
USBSTSReg			dd 0h 
USBINTReg			dd 0h 
FRINDEXReg			dd 0h 
CTRLDSSEGMENTReg 	dd 0h
PeriodLBReg			dd 0h 
; [31:5] - Pointer to QH ; [4:0] - zeros (Pointer 32 byte aligned)
AsуnchLBReg			dd 0h
; HC configuration auxiliary use 
CONFIGReg			dd 0h 

; =====================================================================================================

 	; Prints information about HC Operational I/O Registers 
	;
	; EBX - contains BAR address
	; FS  - contains Selector For Zero Memory
	printEHCIOperInfo proc near

		push ebx           		 ; Save 
		push eax           		 ; 
		push edx                 ;
		push edi                 ; 
		;------------------------
		
		mov edi, ebx 			; Save 
		
		call printOperRegInfo

		;------------------------
		; Out
		
		pop edi 
		pop edx                  ; 
		pop eax                  ; Recover edi
		pop ebx            		 ; Recover ebx 

		ret 
	
	endp

	; Retieves and prints Operational register (USBCMD, USBSTS) 
	; 
	; EAX - contains offset for certain Register
	; EBX - contains Base Address (BAR)
	retrieveOperRegister proc near
		
		push ebx           		; Save ebx 
		push eax			   	; Save eax
		push ecx                ;

		xor ecx, ecx            ;
		
		add ebx, eax            ; 
		mov cx, OperRegOff      ; Get Offset For Operational Registers 
		add ebx, ecx           	; Add Offset for Operational registers

		mov eax, fs:[ebx]       ; Getting USBCMD
		push ax                 ; Print USBCMD
		shr eax, 16             ;
		push ax              	;
		call printWordFromStackRM
		call printWordFromStackRM
		
		pop ecx                 ; Recover Registers
		pop eax             	;
		pop ebx                 ;
		
		ret
	
	endp

	; Prints information about HC Ports from PORTSC Registers  
	;
	printPORTSCinfo proc 

		push ebx           		 ; Save Registers  
		push eax           		 ; 
		push ecx                 ;
		push edi                 ;
		;------------------------;

		mov ebx, HCBaseAddress	 ; Base Address For HC 

		mov edi, ebx 			 ; Save Base Address Register
		
		add ebx, HCSPARAMoffset	 ; 
		mov ecx, fs:[ebx]		 ; HCPARAMS Register in ecx 
		and ecx, 000Fh 			 ; Set only N_PORTS Value 
		
								 ; CX - contains number of ports 

		xor eax, eax 			 ;
		mov ax, OperRegOff
		add edi, eax  			 ; Pointer to Operational Registers
		add edi, PORTSCoffset 	 ; 
								 ; Counter = N_PORTS
	  loopOnPORTs:

	  	mov eax, fs:[edi]		 ; PORTSC value 
	  	; Save Answer
	  	push ax 				 ; 
	  	shr eax, 16              ;
	  	push ax 				 ;
	  	; Print header 
	  	mov ah, 09h				 ;
	  	lea dx, PORTSCMsg		 ;
	  	int 21h					 ; 
	  	call printWordFromStackRM;
		call printWordFromStackRM; 
	  	call printNewLineRM		 ;
	  	; Moves to the next register
	  	add edi, 04h             ; 32-bit step 

	  	loop loopOnPORTs		 ; Loop 

		;------------------------;
		pop edi 				 ;
		pop ecx                  ; 
		pop eax                  ; Recover edi
		pop ebx            		 ; Recover ebx 

		ret 
	
	endp

	; Updates information about Operation Registres in memory  
	;
	updateOperRegInfo proc
		
		push ebx           		 ; Save Registers  
		push eax           		 ; 
		push ecx                 ;
		push edi                 ;
		;------------------------;

		mov ebx, HCBaseAddress	 ; Base Address for HC 

		mov ax, OperRegOff		 ;
		add ebx, eax 			 ; Offset for Operation Registers

		mov eax, fs:[ebx]		 ; USBCMD
		mov USBCMDReg, eax 		 ; Save USBCMD

		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; USBSTS 
		mov USBSTSReg, eax 		 ; Save USBSTS

		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; USBINT  
		mov USBINTReg, eax 		 ; Save USBINT 

		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; FRINDEX  
		mov FRINDEXReg, eax 	 ; Save FRINDEX  
				 
		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; CTRLDSSEGMENT  
		mov CTRLDSSEGMENTReg, eax; Save CTRLDSSEGMENT 

		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; Period List Base
		mov PeriodLBReg, eax 	 ; Save Period List Base

		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; Asуnch List Base
		mov AsуnchLBReg, eax 	 ; Save Asуnch List Base

		add ebx, 04h			 ;
		mov eax, fs:[ebx]		 ; CONFIG
		mov CONFIGReg, eax 	 	 ; Save CONFIG

		;------------------------;
		pop edi 				 ;
		pop ecx                  ; 
		pop eax                  ; Recover edi
		pop ebx            		 ; Recover ebx 

		ret 

	endp

	; Prints information about Operation Registres from memory  
	;
	printOperRegInfo proc near 

		push edx				;  
		push eax 				;
		push ebx 				;
		push edi				;  
		;-----------------------;

		mov ebx, HCBaseAddress	; Base Address

		mov edi, ebx 			; Base Address Storage 
		
		mov ah, 09h				; Print String 
		lea dx, USBCMDmsg		; 
		int 21h					; 

		mov eax, USBCMDoffset
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, USBSTSmsg		; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, USBSTSoffset   ; 
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, USBINTmsg		; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, USBINToffset   ; 
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, FRINDEXMsg		; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, FRINDEXoffset  ; 
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, CTRLDSMsg		; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, CTRLDSoffset   ; 
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, PListBaseMsg	; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, PeriodLBoffset ; 
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, AListBaseMsg	; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, AsуnchLBoffset ; 
		call retrieveOperRegister
		call printNewLineRM

		mov ah, 09h				; Print String 
		lea dx, CONFIGMsg		; 
		int 21h					; 

		mov ebx, edi            ; Base Address
		mov eax, CONFIGoffgset  ; 
		call retrieveOperRegister

		;-----------------------;
		pop edi					;
		pop ebx 				;
		pop eax 				; 
		pop edx 				;

		ret

	endp 


endm