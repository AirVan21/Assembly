initOperationalInfo macro

 	
; =====================================================================================================
; Operational registers

USBCMDoffset   = 00h
USBSTSoffset   = 04h
PeriodLBoffset = 14h
PORTSCOffset   = 44h


; =====================================================================================================


USBCMDReg dw 0h 
USBSTSReg dw 0h 


; =====================================================================================================

 	; Prints information about HC Operational I/O Registers 
	;
	; EBX - contains BAR address
	; EDI - contains Video Mem offset (where to print) | Should be the start of the row 
	; FS  - contains Selector For Zero Memory
	; ES  - contains Video Memory Selector
	printEHCIOperInfo proc near

		push ebx           		 ; Save 
		push eax           		 ; 
		push edx                 ;
		push edi                 ; 
		;------------------------
		
		mov edi, ebx 			; Save 
		
		; USB CMD
		lea dx, USBCMDmsg       ; Address for Message
		mov ah, 09h             ; Print Function
		int 21h

		mov eax, USBCMDoffset   ; USBCMD 

		call retrieveOperRegister; Prints USB CMD Register 

		call printNewLineRM     ; Prints New Line 

		; USB STS 
		lea dx, USBSTSmsg       ; Address for Message
		mov ah, 09h             ; Print Function
		int 21h

		mov ebx, edi            ; Base Address 
		mov eax, USBSTSoffset   ; USBSTS 

		call retrieveOperRegister ; Print USB STS

		call printNewLineRM     ; Prints New Line 

		;Period List Base 
		
		lea dx, PListBase       ; Address for Message
		mov ah, 09h             ; Print Function
		int 21h

		mov ebx, edi            ;  
		mov eax, PeriodLBoffset ; USBSTS 

		call retrieveOperRegister; Print Period Base
		
		call printNewLineRM     ; Prints New Line 

		; PORTSC Register 
		
		lea dx, PORTSCMsg       ; Address for Message
		mov ah, 09h             ; Print Function
		int 21h

		mov ebx, edi            ; 
		mov eax, PORTSCoffset   ; PORTSC offset 
		
		call retrieveOperRegister; Print Period Base
		
		call printNewLineRM     ; Prints New Line 

		;------------------------
		; Out
		
		pop edi 
		pop edx                  ; 
		pop eax                  ; Recover edi
		pop ebx            		 ; Recover ebx 

		ret 
	
	endp

	; Retieves and prints Operational register (USBCMD, USBSTS) 
	; 
	; EAX - contains offset for certain Register
	; EBX - contains Base Address (BAR)
	retrieveOperRegister proc near
		
		push ebx           		; Save ebx 
		push eax			   	; Save eax
		push ecx                ;

		xor ecx, ecx            ;
		
		add ebx, eax            ; 
		mov cx, OperRegOff      ; Get Offset For Operational Registers 
		add ebx, ecx           	; Add Offset for Operational registers

		mov eax, fs:[ebx]       ; Getting USBCMD
		push ax                 ; Print USBCMD
		shr eax, 16             ;
		push ax              	;
		call printWordFromStackRM
		call printWordFromStackRM
		
		pop ecx                  ; Recover Registers
		pop eax             	;
		pop ebx                 ;
		
		ret
	
	endp

endm