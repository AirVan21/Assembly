initControlLib macro

; =====================================================================================================
; qTD Offsets

qTDTokenOffset 			= 08h

; =====================================================================================================
; qTD Status CONSTS 

qTDActiveStatus			= 80h
qTDHaltedStatus			= 40h
qTDBufferErrorStatus 	= 20h
qTDBabbleStatus			= 10h
qTDTransErrorStatus		= 08h
qTDMisddedMFStatus		= 04h 
qTDSplitTransStatus 	= 02h
qTDPingStateStatus		= 01h 
qTDOKStatus 			= 00h

qTDSetupTokenType		= 10b
qTDInTokenType			= 01b
qTDOutTokenType			= 00b 

; =====================================================================================================
; qTD Status Descriptions 	

qTDActiveMsg			db "qTD is Active $"
qTDHaltedMsg			db "qTD is Halted $"
qTDBufferErrorMsg		db "qTD Buffer Error $"
qTDBabbleMsg			db "qTD Babble Detected $"
qTDTransErrorMsg		db "qTD Transaction Error $"
qTDMisddedMFMsg			db "qTD Missed Micro-Frame $"
qTDSplitTransMsg		db "qTD Split Transaction State $"
qTDPingStateMsg			db "qTD Ping State $"
qTDOkStateMsg			db "qTD is OK $"

qTDSetupTokenMsg 		db "Setup Token $"
qTDInTokenMsg			db "In Token    $"
qTDOutTokenMsg			db "Out Token   $"

; =====================================================================================================
; Device Descriptor (DD) fields

DDbLength				db 0h
DDbDescriptorType		db 0h
DDbcdUSB				dw 0h
DDbDeviceClass			db 0h 
DDbDeviceSubclass		db 0h 
DDbDeviceProtocol		db 0h 
DDbMaxPacketSize		db 0h
DDidVendor				dw 0h 
DDidProduct 			dw 0h 
DDbcdDevice				dw 0h 
DDiManufacturer 		db 0h
DDiProduct 				db 0h
DDiSerialNumber			db 0h 
DDbNumConfigurations	db 0h 

; =====================================================================================================
; Device Descriptor Strings

DDbDescriptorTypeMsg		db "Descriptor (0x01)   = $"
DDbcdUSBMsg					db "USB Specification   = $"
DDbDeviceClassMsg			db "Device Class        = $"
DDbDeviceSubclassMsg		db "Device Subclass     = $"
DDbDeviceProtocolMsg		db "Device Protocol     = $"
DDbMaxPacketSizeMsg			db "Max Packet Size     = $"

; =====================================================================================================
; Hub Descriptor (HD) fields

HDbLength				db 0h
HDbDescriptorType		db 0h
HDbNbrPorts				db 0h 
HDwHubCharact			dw 0h 

; =====================================================================================================
; Hub Descriptor Strings

HDbDescriptorTypeMsg		db "Descriptor (0x29)   = $"
HDbNbrPortsMsg 				db "Amount of ports     = $"

; =====================================================================================================
; 09h | 00h | 00h => Class | Subclass | Protocol => Full speed Hub
; 09h | 00h | 01h => Class | Subclass | Protocol => Hi-speed hub with single TT
; 09h | 00h | 02h => Class | Subclass | Protocol => Hi-speed hub with multiple TTs
; =====================================================================================================
	
	; Prints information about qTD Status
	;
	printQTDStatus proc near

		push ebx           		; Save ebx
		push edx                ; 
		push eax                ;
		;------------------------

		; Announce Message type 
		mov ebx, [QTDAddress1]	
		mov eax, [ebx + qTDTokenOffset]
		shr eax, 8 

		cmp al, qTDSetupTokenType
		jz fillQTDSetupToken

		cmp al, qTDInTokenType
		jz fillQTDInToken

		cmp al, qTDOutTokenType
		jz fillQTDOutToken

	  fillQTDSetupToken:
	  	lea dx, qTDSetupTokenMsg
	  	jmp checkQTDStatus

	  fillQTDInToken:
	  	lea dx, qTDInTokenMsg
	  	jmp checkQTDStatus

	  fillQTDOutToken:
	  	lea dx, qTDOutTokenMsg
	  	jmp checkQTDStatus    
  
      checkQTDStatus:

      	mov ah, 09h             
      	int 21h 

      	lea dx, space 
      	int 21h 
		
		; Announce Message Status  
		mov ebx, [QTDAddress1]	
		mov eax, [ebx + qTDTokenOffset]

		cmp al,	qTDActiveStatus 
		jz fillQTDActive

		cmp al,	qTDHaltedStatus
		jz fillQTDHalted

		cmp al,	qTDBufferErrorStatus
		jz fillBufferError
		
		cmp al, qTDBabbleStatus
		jz fillQTDBabble

		cmp al,	qTDTransErrorStatus 
		jz fillQTDTransError
		
		cmp al, qTDMisddedMFStatus
		jz fillQTDMisddedMF	

		cmp al, qTDSplitTransStatus
		jz fillQTDSplitTrans	
		
		cmp al, qTDPingStateStatus
		jz fillQTDPingState

		cmp al,	qTDOKStatus 
		jz fillQTDOK	 	 
	  
	  fillQTDActive:
	  	lea dx, qTDActiveMsg	; Msg for qTD Active 
	  	jmp exitPrintQTDStatus  ;

	  fillQTDHalted:
	  	lea dx, qTDHaltedMsg
	    jmp exitPrintQTDStatus
	  
	  fillBufferError:
	  	lea dx, qTDBufferErrorMsg
	    jmp exitPrintQTDStatus

	  fillQTDBabble:
	  	lea dx, qTDBabbleMsg
	    jmp exitPrintQTDStatus

	  fillQTDTransError:
	  	lea dx, qTDTransErrorMsg; Msg for qTD qTDTransErrorMsg
	  	jmp exitPrintQTDStatus  ;

	  fillQTDMisddedMF:
	  	lea dx, qTDMisddedMFMsg
	    jmp exitPrintQTDStatus
	  
	  fillQTDSplitTrans:
	    lea dx, qTDSplitTransMsg
	    jmp exitPrintQTDStatus

	  fillQTDPingState:
	    lea dx, qTDPingStateMsg
	    jmp exitPrintQTDStatus
	  
	  fillQTDOK:
	  	lea dx, qTDOkStateMsg	; Msg for qTD Active 
	  	jmp exitPrintQTDStatus  ;

      exitPrintQTDStatus:
      	
      	mov ah, 09h             ;
      	int 21h 

      	call printNewLineRM

		;-----------------------;
        pop eax                 ; 
        pop edx                 ;
        pop ebx                 ;

		ret 

	endp

	; Fills fields of Device Descriptor in mem 
	; 
	; ESI - Linear Address of Buffer where Device Descriptor is stored
	retrieveDeviceDescriptor proc near 

		push ebx           		; Save ebx
		push edx                ; 
		push eax                ;
		;------------------------
		
		xor eax, eax 			;
		lea eax, DDbLength		; 

		mov ebx, fs:[esi]		;
		mov [eax], ebx 			; 
		mov ebx, fs:[esi + 4]	;
		mov [eax + 4], ebx 		; 
		mov ebx, fs:[esi + 8]	;
		mov [eax + 8], ebx 		;

		;-----------------------;
        pop eax                 ; 
        pop edx                 ;
        pop ebx                 ;

		ret 

	endp

	; Prints Device Descriptor fields 
	;
	printDeviceDescriptor proc near
		
		push ebx           		; Save ebx
		push edx                ; 
		push eax                ;
		;------------------------

		; bDescriptorType
		mov ah, 09h				
		lea dx, DDbDescriptorTypeMsg
		int 21h 
		xor bx, bx 
		mov bl, [DDbDescriptorType]
		push bx 
		call printWordFromStackRM
		call printSpaceRM

		; bcdUSB
		mov ah, 09h				
		lea dx, DDbcdUSBMsg
		int 21h 
		xor bx, bx
		mov bx, [DDbcdUSB]
		push bx 
		call printWordFromStackRM
		call printNewLineRM

		; bDeviceClass
		mov ah, 09h				
		lea dx, DDbDeviceClassMsg
		int 21h 
		xor bx, bx 
		mov bl, [DDbDeviceClass]
		push bx 
		call printWordFromStackRM
		call printSpaceRM

		; bMaxPacketSize
		mov ah, 09h				
		lea dx, DDbMaxPacketSizeMsg
		int 21h 
		xor bx, bx
		mov bl, [DDbMaxPacketSize]
		push bx 
		call printWordFromStackRM
		call printNewLineRM

		; bDeviceSubclass
		mov ah, 09h				
		lea dx, DDbDeviceSubclassMsg
		int 21h 
		xor bx, bx 
		mov bl, [DDbDeviceSubclass]
		push bx 
		call printWordFromStackRM
		call printSpaceRM

		; bDeviceProtocol
		mov ah, 09h				
		lea dx, DDbDeviceProtocolMsg
		int 21h 
		xor bx, bx
		mov bl, [DDbDeviceProtocol]
		push bx 
		call printWordFromStackRM
		call printNewLineRM

		;-----------------------;
        pop eax                 ; 
        pop edx                 ;
        pop ebx                 ;

		ret 

	endp

	; Fills fields of Hub Descriptor in mem 
	; 
	; ESI - Linear Address of Buffer where Hub Descriptor is stored
	retrieveHubDescriptor proc near 

		push ebx           		; Save ebx
		push edx                ; 
		push eax                ;
		;------------------------
		
		xor eax, eax 			;
		lea eax, HDbLength		; 

		mov bx, word ptr fs:[esi]
		mov [eax], bx 			  
		mov bl, byte ptr fs:[esi + 2]
		mov [eax + 2], bl
		mov bx, word ptr fs:[esi + 3]
		mov [eax + 3], bx
		;-----------------------;
        pop eax                 ; 
        pop edx                 ;
        pop ebx                 ;

		ret 

	endp

	; Prints Hub Descriptor fields 
	;
	printHubDescriptor proc near
		
		push ebx           		; Save ebx
		push edx                ; 
		push eax                ;
		;------------------------

		; bDescriptorType
		mov ah, 09h				
		lea dx, HDbDescriptorTypeMsg
		int 21h 
		xor bx, bx 
		mov bl, [HDbDescriptorType]
		push bx 
		call printWordFromStackRM
		call printSpaceRM

		; HDbNbrPortsMsg
		mov ah, 09h				
		lea dx, HDbNbrPortsMsg
		int 21h 
		xor bx, bx
		mov bl, [HDbNbrPorts]
		push bx 
		call printWordFromStackRM
		call printNewLineRM
		
		;-----------------------;
        pop eax                 ; 
        pop edx                 ;
        pop ebx                 ;

		ret 

	endp  

endm